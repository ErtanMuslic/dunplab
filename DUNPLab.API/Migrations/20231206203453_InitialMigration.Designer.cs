// <auto-generated />
using System;
using DUNPLab.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DUNPLab.API.Migrations
{
    [DbContext(typeof(DunpContext))]
    [Migration("20231206203453_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DUNPLab.API.Models.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrojDokumenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DatumIstekaDokumenta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Rezultat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSupstance")
                        .HasColumnType("integer");

                    b.Property<int>("IdUzorka")
                        .HasColumnType("integer");

                    b.Property<bool?>("JeLiUGranicama")
                        .HasColumnType("boolean");

                    b.Property<double?>("Vrednost")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdSupstance");

                    b.HasIndex("IdUzorka");

                    b.ToTable("Rezultati");
                });

            modelBuilder.Entity("DUNPLab.API.Models.RezultatOdMasine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumVreme")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImeIPrezime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("JesuLiPrebaceni")
                        .HasColumnType("boolean");

                    b.Property<string>("KodEpruvete")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RezultatiOdMasine");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Supstanca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Cena")
                        .HasColumnType("double precision");

                    b.Property<double?>("DonjaGranica")
                        .HasColumnType("double precision");

                    b.Property<double?>("GornjaGranica")
                        .HasColumnType("double precision");

                    b.Property<string>("MetodTestiranja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Oznaka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Supstance");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Testiranje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojSobe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DatumVremeRezultata")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatumVremeTestiranja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Izmenio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("IzmenioDatumVreme")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("JesuLiPotvrdjeniSviUzorci")
                        .HasColumnType("boolean");

                    b.Property<string>("NacinPlacanja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestOdradio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("UkupnaCena")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Testiranja");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Uzorak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Cena")
                        .HasColumnType("double precision");

                    b.Property<int>("IdTestiranja")
                        .HasColumnType("integer");

                    b.Property<string>("Izmenio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("IzmenioDatumVreme")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KodEpruvete")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KonacanRezultat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kutija")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetodTestiranja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdTestiranja");

                    b.ToTable("Uzorci");
                });

            modelBuilder.Entity("DUNPLab.API.Models.VrednostOdMasine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("JeLiBiloGreske")
                        .HasColumnType("boolean");

                    b.Property<string>("OznakaSubstance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RezultatOdMasineId")
                        .HasColumnType("integer");

                    b.Property<double>("Vrednost")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RezultatOdMasineId");

                    b.ToTable("VrednostiOdMasine");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Rezultat", b =>
                {
                    b.HasOne("DUNPLab.API.Models.Supstanca", "Supstanca")
                        .WithMany()
                        .HasForeignKey("IdSupstance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DUNPLab.API.Models.Uzorak", "Uzorak")
                        .WithMany("Rezultati")
                        .HasForeignKey("IdUzorka")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supstanca");

                    b.Navigation("Uzorak");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Uzorak", b =>
                {
                    b.HasOne("DUNPLab.API.Models.Testiranje", "Testiranje")
                        .WithMany("Uzorci")
                        .HasForeignKey("IdTestiranja")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Testiranje");
                });

            modelBuilder.Entity("DUNPLab.API.Models.VrednostOdMasine", b =>
                {
                    b.HasOne("DUNPLab.API.Models.RezultatOdMasine", "RezultatOdMasine")
                        .WithMany("VrednostiOdMasine")
                        .HasForeignKey("RezultatOdMasineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RezultatOdMasine");
                });

            modelBuilder.Entity("DUNPLab.API.Models.RezultatOdMasine", b =>
                {
                    b.Navigation("VrednostiOdMasine");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Testiranje", b =>
                {
                    b.Navigation("Uzorci");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Uzorak", b =>
                {
                    b.Navigation("Rezultati");
                });
#pragma warning restore 612, 618
        }
    }
}
